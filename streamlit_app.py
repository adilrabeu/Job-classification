# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iDnIKNcV0TRBf6pY0w9VwSl4UKQqgYPQ
"""

import streamlit as st
import pandas as pd
import joblib
import os

st.set_page_config(page_title="Karkidi Job Monitor", layout="wide")
st.title("üîç Karkidi Job Monitoring App")

# --- Load data ---
@st.cache_data
def load_data():
    if not os.path.exists("clustered_jobs.csv"):
        return None
    df = pd.read_csv("clustered_jobs.csv")
    return df

@st.cache_resource
def load_model():
    try:
        model = joblib.load("karkidi_model.pkl")
        vectorizer = joblib.load("karkidi_vectorizer.pkl")
        return model, vectorizer
    except Exception as e:
        st.error(f"Failed to load model/vectorizer: {e}")
        return None, None

df = load_data()
model, vectorizer = load_model()

if df is None:
    st.warning("No job data found. Please run the pipeline script first (`run_karkidi_pipeline.py`).")
    st.stop()

# --- Sidebar: User input ---
st.sidebar.header("üîß Filter Options")
skills_input = st.sidebar.text_input("Enter your skills (comma-separated)", "python, machine learning")
user_keywords = [s.strip().lower() for s in skills_input.split(",")]

st.sidebar.markdown("You can update the job list by re-running the pipeline script.")

# --- Filter jobs based on user skills ---
def match_user_skills(row):
    return any(keyword in row.lower() for keyword in user_keywords)

df['matched'] = df['skills_str'].apply(match_user_skills)
matching_jobs = df[df['matched']]

# --- Display results ---
st.subheader("üéØ Jobs Matching Your Skills")
if not matching_jobs.empty:
    st.dataframe(matching_jobs[['Title', 'Company', 'Location', 'Experience', 'Skills', 'Summary', 'Cluster']])
else:
    st.info("No matching jobs found for the entered skills.")

st.subheader("üìä All Jobs Grouped by Cluster")
clusters = sorted(df['Cluster'].unique())
for cluster_id in clusters:
    with st.expander(f"Cluster {cluster_id}"):
        cluster_jobs = df[df['Cluster'] == cluster_id]
        st.dataframe(cluster_jobs[['Title', 'Company', 'Location', 'Experience', 'Skills', 'Summary']])